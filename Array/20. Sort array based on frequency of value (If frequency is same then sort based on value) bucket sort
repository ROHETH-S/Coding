class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) 
    {
       unordered_map<int, int> map;
       int N=nums.size();
       vector<int> res;
 
    for (int i = 0; i < N; i++)
        map[nums[i]]++;
 
    // for (auto x : map)
    //     cout << x.first << " " << x.second << endl;
        
    vector<vector<int> > frequency(N + 1);
    for (auto x : map) 
    {
        frequency[x.second].push_back(x.first);
    }  
    
    // for(int i=0; i<frequency.size(); i++)
    // {
    //     for(int j=0; j<frequency[i].size(); j++)
    //     {
    //         cout<<frequency[i][j]<<" ";
    //     }
    // }
    
    for (int i = 0; i < frequency.size(); i++) 
    {
 
        if (frequency[i].size() > 1) 
        {
            sort(frequency[i].begin(), frequency[i].end(),
                 greater<int>());
        }
        
        
        for(int j=0; j<frequency[i].size(); j++)
        {
          for(int k=1; k<=i; k++)
          {
              res.push_back(frequency[i][j]);
          }
           
        }
        
       
    }
       return res;
    }
};
 
int main()
{
    int arr[] = {1,1,2,2,2,3};
    int N = sizeof(arr) / sizeof(arr[0]);
    int K=2;
    Frequency(arr, N, K);
}
