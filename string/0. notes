we cant simply a convert a string to lower by "to_lower" we must loop and change each charachter

we cant push back a string in "push_back" we can only do for char
string s1="";
s1=s1+word1[i];

we cant concanetate to char, only string be

in the string we cant simply use the digt present in the string as int, we must do this 
index=s[i]-'1';


"find()" method is to check for string, charachter in present in both string
 for(auto x : patterns) 
        {
            if(word.find(x) != string::npos) 
            {
                count++;
            }
        }
  here it check for the elements is present in the patterns(array) is there in word, only the substring elements are counted
  for eg, 
  Input patterns = ["a", ab", "abc", "abd"]  word = "abcd"
Output 3 // abd is not a substirng 

for finding position we can do this
  size_t pos = haystack.find(needle);
         if (pos != string::npos) {
        return pos;
    }
    

string::npos is a static member constant of the std::string class in C++. The value string::npos is used to represent the absence of a valid index or position in a string
if element not found it retur -1


we must always intialize int flag=0 if we need

if we need to travel two different string, we can travel in a single loop, but the both the string must be of same length if not, there will be run time error
to overcome this, eg- merge string alternativly
for(i=0,j=0; i<l1 || j<l2; i++,j++)
        {
            if(i<l1) 
            {
                str=str+word1[i];
            }
            if(j<l2)
             {
                str=str+word2[j];
            }
        }  
        
it is better to give false condition if statemnt and run the program        
        
